(() => {
  "use strict";
  var W = {
      1886: (o, c, s) => {
        var f = s(7658),
          g = s(4873),
          u = s(4369),
          l = s(5787),
          S = s(3247);
        const E = () => {
            document.querySelectorAll(".accordion").forEach((t) => {
              const e = t.querySelectorAll(".accordion__trigger"),
                d = t.querySelectorAll(".accordion__panel");
              d.forEach((h) => {
                h.classList.contains("show-panel") &&
                  (h.style.height = `${h.scrollHeight}px`);
              });
              const a = (h) => {
                const r = h.target.closest(".accordion__trigger");
                if (!r) return;
                const y = r.getAttribute("aria-controls"),
                  p = t.querySelector(`#${y}`),
                  v = r.getAttribute("aria-multi");
                v !== "1"
                  ? (e.forEach((m) => {
                      m !== r && m.setAttribute("aria-expanded", !1);
                    }),
                    d.forEach((m) => {
                      h.isTrusted ||
                        (m.classList.add("no-transition"),
                        setTimeout(() => {
                          m.classList.remove("no-transition");
                        }, 1e3)),
                        m === p
                          ? r.getAttribute("aria-expanded") === "true"
                            ? (r.setAttribute("aria-expanded", !1),
                              p.classList.remove("open"),
                              (m.style.height = 0))
                            : (r.setAttribute("aria-expanded", !0),
                              p.classList.add("open"),
                              (m.style.height = `${m.scrollHeight}px`))
                          : (m.style.height = 0);
                    }))
                  : v === "1" &&
                    (r.getAttribute("aria-expanded") === "true"
                      ? (r.setAttribute("aria-expanded", !1),
                        p.classList.remove("open"),
                        (p.style.height = 0))
                      : (r.setAttribute("aria-expanded", !0),
                        p.classList.add("open"),
                        (p.style.height = `${p.scrollHeight}px`)));
              };
              t.addEventListener("click", a);
            });
          },
          F = () => {
            const i = () => {
              if (!window.AnimationEvent) return;
              document.querySelector("[data-fader]")?.classList.add("fade-out");
            };
            document.addEventListener("DOMContentLoaded", () => {
              if (!window.AnimationEvent) return;
              const t = document.querySelector("[data-fader]");
              if (!t) return;
              const e = document.querySelectorAll("a");
              for (const d of e)
                d.hostname === window.location.hostname &&
                  d.addEventListener("click", (a) => {
                    a.preventDefault();
                    const h = a.currentTarget,
                      r = () => {
                        (window.location = h.href),
                          t.removeEventListener("animationend", r);
                      };
                    t.addEventListener("animationend", r),
                      t.classList.add("fade-in");
                  });
            }),
              window.addEventListener("pageshow", (t) => {
                if (!t.persisted) return;
                document
                  .querySelector("[data-fader]")
                  ?.classList.remove("fade-in");
              }),
              i();
          },
          O = () => {
            const i = document.querySelectorAll(".rte table");
            i.length !== 0 &&
              i.forEach((t) => {
                const e = document.createElement("div");
                e.classList.add("rte__table-wrapper"),
                  t.parentNode.insertBefore(e, t),
                  e.appendChild(t);
              });
          },
          x = () => {
            const i = document.querySelectorAll(
              '.rte iframe[src*="youtube.com/embed"], .rte iframe[src*="player.vimeo"]'
            );
            i.length !== 0 &&
              i.forEach((t) => {
                const e = document.createElement("div");
                e.classList.add("rte__video-wrapper"),
                  t.parentNode.insertBefore(e, t),
                  e.appendChild(t);
              });
          };
        var V = s(1703),
          Z = s(5303);
        class H {
          constructor(t, e, d) {
            if (!t) return;
            this.options = typeof e == "object" ? e : null;
            const {
                modalId: a,
                triggerEl: h,
                toggleEl: r,
                focusEl: y,
                timerReveal: p,
              } = this.options,
              v = localStorage.getItem(`timerPopup-${a}`);
            if (!a) throw new Error("Missing modalId");
            const m = t.querySelectorAll(`[data-modal-close="modal-${a}"]`);
            this.modalIsOpen = !1;
            const T = (0, Z.v)(t, { initialFocus: y, allowOutsideClick: !0 }),
              A = (w) => {
                t.setAttribute("aria-modal", !0),
                  t.removeAttribute("aria-hidden"),
                  t.classList.add("modal--visible"),
                  document.documentElement.classList.add("modal-js--open"),
                  document.documentElement.classList.add(`${a}-modal-js--open`),
                  setTimeout(() => {
                    T.activate();
                  }, 500),
                  (this.modalIsOpen = !0),
                  r?.forEach((k) => k.classList.add("is-active")),
                  h?.forEach((k) => k.classList.add("is-active")),
                  d && d(w, t);
              },
              C = () => {
                t.removeAttribute("aria-modal"),
                  t.setAttribute("aria-hidden", !0),
                  t.classList.remove("modal--visible"),
                  T.deactivate(),
                  (this.modalIsOpen = !1),
                  r?.forEach((w) => w.classList.remove("is-active")),
                  h?.forEach((w) => w.classList.remove("is-active")),
                  document.documentElement.classList.remove(
                    `${a}-modal-js--open`
                  ),
                  document.querySelector(".modal--visible") ||
                    document.documentElement.classList.remove("modal-js--open"),
                  window.dispatchEvent(
                    new CustomEvent(`${a}_modal_closed`, {})
                  );
              },
              R = () => {
                this.modalIsOpen ? C() : A();
              };
            if (
              (t.addEventListener("click", (w) => {
                w.target.closest(".modal__dialog") || C();
              }),
              document.documentElement.addEventListener(
                "click",
                (w) => {
                  w.target.closest(".modal__dialog") ||
                    !this.modalIsOpen ||
                    (w.preventDefault(), w.stopPropagation(), C());
                },
                { capture: !0 }
              ),
              window.addEventListener("closeModal", () => {
                C();
              }),
              window.addEventListener(`close_modal:${a}`, () => {
                C();
              }),
              window.addEventListener(`open_modal:${a}`, () => {
                A();
              }),
              r?.forEach((w) => {
                w.addEventListener("click", (k) => {
                  k.preventDefault(), R();
                });
              }),
              h?.forEach((w) => {
                w.addEventListener("click", (k) => {
                  k.preventDefault(), A(w);
                });
              }),
              p && window.localStorage)
            ) {
              let w = new Date();
              (w = w.setHours(w.getHours())),
                (!v || v <= w) &&
                  window.setTimeout(() => {
                    A();
                  }, p);
            }
            m?.forEach((w) => {
              w.addEventListener("click", (k) => {
                if ((k.preventDefault(), C(), p && window.localStorage && a)) {
                  if (v > new Date()) return;
                  let $ = new Date();
                  ($ = $.setHours($.getHours() + 24)),
                    localStorage.setItem(`timerPopup-${a}`, $);
                }
              });
            });
          }
        }
        const M = {
          showLoginLink: "[data-show-login-form]",
          showRegisterLink: "[data-show-register-form]",
          showRecoverPasswordLink: "[data-show-recover-password-form]",
          loginFormContainer: "[data-login-modal-login-form]",
          registerFormContainer: "[data-login-modal-register-form]",
          recoverPasswordForm: "[data-login-modal-recover-password-form]",
        };
        function K() {
          const i = document.querySelector("#modal-login"),
            t = document.querySelectorAll("[data-login-modal-trigger]"),
            e = document.querySelector(M.loginFormContainer),
            d = document.querySelector(M.registerFormContainer),
            a = document.querySelector(M.recoverPasswordForm),
            h = (m) => {
              m.preventDefault(),
                e?.classList.remove("hide"),
                d?.classList.add("hide"),
                a?.classList.add("hide");
            },
            r = (m) => {
              m.preventDefault(),
                e?.classList.add("hide"),
                d?.classList.remove("hide"),
                a?.classList.add("hide");
            },
            y = (m) => {
              m.preventDefault(),
                e?.classList.add("hide"),
                d?.classList.add("hide"),
                a?.classList.remove("hide");
            };
          if (i && t.length > 0) {
            const m = i.querySelector("#login-modal-email"),
              T = new H(i, { triggerEl: t, focusEl: m, modalId: "login" }),
              A = document.querySelectorAll(M.showLoginLink),
              C = document.querySelectorAll(M.showRegisterLink),
              R = document.querySelectorAll(M.showRecoverPasswordLink);
            A.forEach((w) => w.addEventListener("click", h)),
              C.forEach((w) => w.addEventListener("click", r)),
              R.forEach((w) => w.addEventListener("click", y));
          }
          const p = e?.querySelector("form");
          if (p) {
            const m = p.elements,
              T = m["customer[email]"],
              A = m["customer[password]"];
            p?.addEventListener("submit", () => {
              !T.value ||
                !A.value ||
                ((window.dataLayer = window.dataLayer || []),
                window.dataLayer.push({
                  event: "account_login",
                  email: T.value,
                }));
            });
          }
          const v = d?.querySelector("form");
          if (v) {
            const m = v.elements,
              T = m["customer[email]"],
              A = m["customer[password]"];
            v.addEventListener("submit", () => {
              !T.value ||
                !A.value ||
                ((window.dataLayer = window.dataLayer || []),
                window.dataLayer.push({
                  event: "account_register",
                  email: T.value,
                }));
            });
          }
        }
        var Q = s(8586);
        const J = "wishlist:added",
          X = "swym-added",
          tt = (i) => {
            window.SwymCallbacks || (window.SwymCallbacks = []),
              window.SwymCallbacks.push(i);
          },
          et = () => new Promise((i) => tt(() => window._swat.fetch(i))),
          G = () => {
            window.wishlistProducts.length &&
              [...window.wishlistProducts, "header"].forEach((i) => {
                document
                  .querySelectorAll(`[data-wishlist-icon="${i}"]`)
                  ?.forEach((e) => e.classList.add(X));
              });
          },
          Y = async () => {
            (window.wishlistProducts = []),
              window.addEventListener(J, (t) => {
                t.detail.product &&
                  ((window.wishlistProducts = [
                    ...window.wishlistProducts,
                    t.detail.product,
                  ]),
                  G());
              });
            const i = await et();
            i?.length &&
              ((window.wishlistProducts = [
                ...new Set(i.map((t) => t.empi)),
                ...window.wishlistProducts,
              ]),
              G());
          };
        class st extends HTMLElement {
          constructor() {
            super(),
              (this.selectors = {
                optionsToggle: "[data-options-toggle]",
                optionsToggleLabel: "[data-options-toggle-label]",
                optionsWrapper: "[data-product-options-wrapper]",
                option: "[data-product-option]",
                addToCartForm: "[data-product-form]",
                submitButton: "[data-submit-button]",
                productImage: "[data-product-image]",
                notifyForm: "[data-notify-form]",
                notifyFormSubmit: "[data-notify-form-submit]",
                notifyFormToggle: "[data-notify-form-toggle]",
                notifyFormSuccess: "[data-notify-form-success]",
                helperText: "[data-helper-text]",
              }),
              (this.strings = JSON.parse(this.getAttribute("strings"))),
              (this.product = JSON.parse(this.getAttribute("product"))),
              (this.optionsToggleEl = this.querySelector(
                this.selectors.optionsToggle
              )),
              (this.optionsToggleLabels = this.querySelectorAll(
                this.selectors.optionsToggleLabel
              )),
              (this.optionsWrapperEl = this.querySelector(
                this.selectors.optionsWrapper
              )),
              (this.optionsEl = this.querySelectorAll(this.selectors.option)),
              (this.addToCartForm = this.querySelector(
                this.selectors.addToCartForm
              )),
              (this.submitButtonEl = this.querySelector(
                this.selectors.submitButton
              )),
              (this.productImage = this.querySelector(
                this.selectors.productImage
              )),
              (this.notifyForm = this.querySelector(this.selectors.notifyForm)),
              (this.notifyFormSubmit = this.querySelector(
                this.selectors.notifyFormSubmit
              )),
              (this.notifyFormToggle = this.querySelector(
                this.selectors.notifyFormToggle
              )),
              (this.notifyFormSuccess = this.querySelector(
                this.selectors.notifyFormSuccess
              )),
              this.init();
          }
          init() {
            this.submitButtonEl.addEventListener(
              "click",
              this.handleFormSubmit.bind(this)
            ),
              this.addToCartForm.addEventListener(
                "submit",
                this.handleFormSubmit.bind(this)
              ),
              this.optionsToggleEl?.addEventListener(
                "click",
                this.toggleOptions.bind(this)
              ),
              this.productImage?.addEventListener("click", () => {
                this.optionsWrapperEl.setAttribute("aria-expanded", "false"),
                  this.getAttribute("state") === "notify" &&
                    this.setAttribute("state", "add");
              }),
              this.optionsEl?.forEach((e) =>
                e.addEventListener(
                  "click",
                  this.handleOptionSelection.bind(this)
                )
              ),
              this.initNotifyForm();
            const t = { onFormSubmit: this.onFormSubmit.bind(this) };
            this.productForm = new Q.H(this.addToCartForm, this.product, t);
          }
          initWishlist() {
            this.setAttribute("state", "wishlist"),
              this.querySelectorAll('[name="id"]')?.forEach((t) => {
                t.disabled = !1;
              }),
              this.optionsEl.length
                ? this.optionsEl?.forEach((t) => {
                    t.setAttribute("data-product-option", "wishlist");
                    const e = t.querySelector(this.selectors.helperText);
                    e.innerHTML = this.strings.addToWishlist;
                  })
                : (this.submitButtonEl.classList.remove("btn--tertiary"),
                  (this.submitButtonEl.innerHTML = this.strings.addToWishlist),
                  (this.submitButtonEl.disabled = !1));
          }
          initNotifyMe() {
            this.setAttribute("state", "notify");
            const t = new URL(window.location.href),
              e = Number(t.searchParams.get("variant"));
            if (!e) return;
            this.querySelector(`label[for="option-${e}"]`)?.click();
          }
          onFormSubmit(t) {
            t.preventDefault();
            const d = this.addToCartForm?.elements.id?.value,
              a = /(?:^(properties\[))(.*?)(?:\])/,
              h = this.querySelectorAll('[name^="properties"]'),
              r = Array.from(h).map((y) => {
                const p = a.exec(y.name)[2],
                  v = y.value;
                return [p, v];
              });
            if (d) {
              window.dispatchEvent(new CustomEvent("close_modal:product", {}));
              const y = {
                id: parseInt(d, 10),
                quantity: 1,
                properties: Object.fromEntries(r),
              };
              window.sideCart.handleAddToCartEvent(y, !0);
            }
          }
          toggleOptions(t) {
            t?.preventDefault();
            const e =
              this.optionsWrapperEl.getAttribute("aria-expanded") === "true";
            this.optionsWrapperEl.setAttribute("aria-expanded", !e);
          }
          handleOptionSelection(t) {
            this.toggleOptions();
            const e = t.currentTarget,
              d = e.dataset.productOption;
            this.setAttribute("state", d),
              this.optionsToggleLabels.forEach((a) => {
                a.innerHTML = e.dataset.label;
              }),
              this.updateSubmitButton(d);
          }
          updateSubmitButton(t) {
            switch (t) {
              case "add":
                this.submitButtonEl.classList.remove("btn--tertiary"),
                  (this.submitButtonEl.innerHTML = this.strings.addToCart),
                  (this.submitButtonEl.disabled = !1);
                break;
              case "notify":
                this.submitButtonEl.classList.add("btn--tertiary"),
                  (this.submitButtonEl.innerHTML = this.strings.outOfStock),
                  (this.submitButtonEl.disabled = !this.notifyForm);
                break;
              case "wishlist":
                this.submitButtonEl.classList.remove("btn--tertiary"),
                  (this.submitButtonEl.innerHTML = this.strings.addToWishlist),
                  (this.submitButtonEl.disabled = !1);
                break;
              default:
                this.submitButtonEl.classList.add("btn--tertiary"),
                  (this.submitButtonEl.innerHTML =
                    this.strings.optionSelectPrompt),
                  (this.submitButtonEl.disabled = !1),
                  this.optionsToggleLabels.forEach((e) => {
                    e.innerHTML = this.strings.optionSelectPrompt;
                  });
            }
          }
          handleFormSubmit(t) {
            switch (this.getAttribute("state")) {
              case "add":
                break;
              case "notify":
                t.preventDefault();
                break;
              case "unavailible":
                t.preventDefault(), this.setAttribute("state", "notify");
                break;
              case "wishlist":
                t.preventDefault(), this.addToWishList();
                break;
              default:
                t.preventDefault();
            }
          }
          addToWishList() {
            const t =
                this.addToCartForm.querySelector('[name="id"]:checked')
                  ?.value ??
                this.addToCartForm.querySelector('[name="id"]')?.value,
              e = this.product.variants.find((r) => r.id === parseInt(t, 10)),
              d = {
                epi: e.id,
                du: `${window.location.origin}/products/${this.product.handle}`,
                empi: parseInt(this.product.id, 10),
                pr: e.price,
              },
              a = (r) => {
                window.SwymCallbacks || (window.SwymCallbacks = []),
                  window.SwymCallbacks.push(r);
              },
              h = () => {
                (this.submitButtonEl.innerHTML = this.strings.addedToWishlist),
                  setTimeout(() => {
                    window.dispatchEvent(
                      new CustomEvent("close_modal:product", {})
                    );
                  }, 3e3);
              };
            new Promise((r, y) => {
              a(() =>
                window._swat.addToWishList(
                  d,
                  (p) => {
                    r(p),
                      window.wishlistItems && window.wishlistItems.push(p),
                      h(),
                      window.dispatchEvent(
                        new CustomEvent(J, {
                          detail: { product: this.product.id },
                        })
                      );
                  },
                  (p) => {
                    y(p);
                  }
                )
              );
            });
          }
          initNotifyForm() {
            if (!this.notifyForm) return;
            this.notifyForm.addEventListener(
              "submit",
              this.handleNotifyFormSubmit.bind(this)
            ),
              this.notifyFormToggle &&
                this.notifyFormToggle.addEventListener("click", (e) => {
                  e.preventDefault(), this.setAttribute("state", "unavailible");
                });
            const t = this.notifyForm.querySelector('[name="email"]');
            t.addEventListener("input", () => {
              t.value
                ? ((this.notifyFormSubmit.innerHTML =
                    this.strings.notifyMeButtonLabel),
                  this.notifyFormSubmit.classList.remove("btn--tertiary"))
                : ((this.notifyFormSubmit.innerHTML =
                    this.strings.notifyMeButtonPrompt),
                  this.notifyFormSubmit.classList.add("btn--tertiary"));
            });
          }
          handleNotifyFormSubmit(t) {
            t.preventDefault();
            const e = t.target.closest(this.selectors.notifyForm),
              d = new FormData(e),
              a = e.elements;
            if (
              !a.a.value ||
              !a.variant.value ||
              !a.platform.value ||
              !a.email.value
            )
              return;
            fetch(
              "https://a.klaviyo.com/onsite/components/back-in-stock/subscribe",
              { method: "post", body: new URLSearchParams(d) }
            )
              .then((r) => r.json())
              .then((r) => {
                r.success &&
                  (this.notifyFormSuccess.setAttribute("aria-hidden", "false"),
                  (a.email.value = ""));
              })
              .catch((r) => {
                window.console.error("error", r);
              });
          }
        }
        const j = {
            modal: "#modal-product",
            modalContent: "[data-product-modal]",
            modalTriggers: "[data-product-modal-trigger]",
          },
          ot = { placeholderContent: "product-modal--placeholder" };
        function D() {
          const i = document.querySelector(j.modal),
            t = document.querySelectorAll(j.modalTriggers),
            e = i.querySelector(j.modalContent),
            d = `
  <div class="product-modal__image">
    <div class="component-image__wrapper aspect-ratio aspect-ratio--2-3"></div>
  </div>

  <div>
    <div class="product-modal__options-wrapper"></div>
    <div class="product-modal__footer">
      <div class="btn btn--disabled">&nbsp;</div>
    </div>
  </div>
  `,
            a = async (h) => {
              const r = h.dataset.productModalTrigger,
                y = h.dataset.productModalType,
                v = `${
                  window.theme.locale?.primary
                    ? ""
                    : window.theme.locale.rootUrl
                }/products/${r}?view=modal`,
                m = await fetch(v);
              if (m.ok)
                switch (
                  ((e.innerHTML = await m.text()),
                  e.classList.remove(ot.placeholderContent),
                  y === "wishlist" &&
                    e.querySelector("product-modal").initWishlist(),
                  y)
                ) {
                  case "notify":
                    e.querySelector("product-modal").initNotifyMe();
                    break;
                  case "wishlist":
                    e.querySelector("product-modal").initWishlist();
                    break;
                  default:
                    break;
                }
            };
          if (i && t.length > 0) {
            const h = i.querySelector("[data-add-to-cart]");
            window.productModal = new H(
              i,
              { triggerEl: t, focusEl: h ?? !1, modalId: "product" },
              a
            );
          }
          customElements.get("product-modal") ||
            (customElements.define("product-modal", st), (e.innerHTML = d)),
            window.addEventListener("product_modal_closed", () => {
              e.innerHTML = d;
            });
        }
        function it() {
          class i extends HTMLElement {
            constructor() {
              super(),
                (this.selectors = {
                  swatch: ".swatch",
                  swatchList: ".swatches__list",
                  swatchActive: ".swatch--active",
                }),
                (this.classes = { swatchActive: "swatch--active" }),
                this.init();
            }
            init() {
              this.addEventListener("click", (e) => {
                e.target.hasAttribute("data-swatch") &&
                  this.getStitchedProduct(e, e.target);
              });
            }
            async getStitchedProduct(e, d) {
              if ((e.preventDefault(), d.matches(this.selectors.swatchActive)))
                return;
              const a = d.href.split("products/")[1],
                h = a.includes("?") ? "&" : "?",
                y = `${
                  window.theme.locale?.primary
                    ? ""
                    : window.theme.locale.rootUrl
                }/products/${a}${h}view=card`,
                p = await fetch(y);
              if (p.ok) {
                const v = document.createElement("div");
                v.innerHTML = await p.text();
                const m = v.querySelector("product-card"),
                  T = this.updateSwatches(m, d.dataset.swatch);
                (this.innerHTML = T.innerHTML), D();
              }
            }
            updateSwatches(e, d) {
              const a = this.querySelector(this.selectors.swatchList),
                h = e.querySelector(this.selectors.swatchList);
              return (
                (h.innerHTML = a.innerHTML),
                h.querySelectorAll(this.selectors.swatch).forEach((r) => {
                  r.dataset.swatch === d
                    ? r.classList.add(this.classes.swatchActive)
                    : r.classList.remove(this.classes.swatchActive);
                }),
                e
              );
            }
          }
          customElements.define("product-card", i);
        }
        const rt = it;
        var nt = s(6243);
        class at extends HTMLElement {
          constructor() {
            super(),
              (this.selectors = {
                addressForm: "[data-address-form]",
                addressFormFields: "[data-address-fields]",
                addressRequiredField: "[data-required]",
                addressCountry: '[name="address[country]"]',
                addressDeleteForm: "[data-address-delete-form]",
                modalTrigger: "[data-address-modal-trigger]",
              }),
              (this.addressForm = this.querySelector(
                this.selectors.addressForm
              )),
              (this.addressFields = this.addressForm.querySelector(
                this.selectors.addressFormFields
              )),
              (this.modalId = `modal-${this.dataset.modalId}`),
              (this.modalEl = this.querySelector(`#${this.modalId}`)),
              (this.modalTriggers = this.querySelectorAll(
                this.selectors.modalTrigger
              )),
              (this.modalFocusEl = this.querySelectorAll(
                this.selectors.modalTrigger
              )),
              this.initAddressForm(),
              this.initModal();
          }
          initModal() {
            const t = new H(this.modalEl, {
              triggerEl: this.modalTriggers,
              modalId: this.dataset.modalId,
            });
          }
          initAddressForm() {
            (0, nt.k)(this.addressFields, window.theme.locale.isoCode, {
              shippingCountriesOnly:
                this.addressFields.dataset.addressLimitCountries === "true",
            }),
              this.addressFields
                .querySelector(this.selectors.addressCountry)
                ?.addEventListener("change", () =>
                  this.handleFieldVisibility()
                ),
              this.querySelector(
                this.selectors.addressDeleteForm
              )?.addEventListener("submit", this.handleAddressDelete);
          }
          handleFieldVisibility() {
            requestAnimationFrame(() => {
              Array.from(
                this.addressFields.querySelectorAll(
                  this.selectors.addressRequiredField
                )
              ).forEach((e) => {
                if (e.parentElement.dataset.ariaHidden === "true") {
                  e.required = !1;
                  return;
                }
                e.required = !0;
              });
            });
          }
          handleAddressDelete(t) {
            const e = t.currentTarget.getAttribute("data-confirm-message");
            window.confirm(
              e || "Are you sure you wish to delete this address?"
            ) || t.preventDefault();
          }
        }
        function dt() {
          customElements.define("address-card", at);
        }
        const lt = (i) => {
            const t = document.querySelector(i);
            return t
              ? t.dataset.brauzId
                ? [t, t.dataset.brauzId]
                : (window.console.error(
                    "Could not find BRAUZ ID. Make sure it's specified in theme settings."
                  ),
                  [!1])
              : [!1];
          },
          ct = () => {
            const [i, t] = lt("[data-book-appointment]");
            if (!i) return;
            window.Brauz.initializeBrauzBookAStylist(t),
              document
                .querySelectorAll("[data-book-appointment]")
                .forEach((d) => {
                  d.addEventListener("click", () => {
                    window.theme.customer &&
                      (window.Brauz_reserve_in_store_customer_data = {
                        first_name: window.theme.customer.first_name,
                        last_name: window.theme.customer.last_name,
                        email: window.theme.customer.email,
                        phone: window.theme.customer.phone,
                      });
                      if(window.location.pathname.includes("book-a-stylist")){
                        // B5-1709504765: the one-on-one styling booking form's ID
                        // by default: The page book-a-stylist is to open only the one-on-one styling booking form
                        window.Brauz_open_book_a_stylist_dialog({ selected_child_form_id: "B5-1709504765" }); 
                      }else{
                        window.Brauz_open_book_a_stylist_dialog(); 
                      }
                  });
                });
          };
        function ut() {
          class i extends HTMLElement {
            constructor() {
              super(),
                (this.userId = this.dataset.userId),
                (this.productId = this.dataset.productId),
                this.userId && this.productId && this.fetchOkendoSizeFitData();
            }
            async fetchOkendoSizeFitData() {
              const e = await fetch(
                `https://api.okendo.io/v1/stores/${this.userId}/products/shopify-${this.productId}/review_aggregate`
              );
              if (e.ok === !1)
                throw (
                  (this.hide(),
                  new Error(
                    `Could not fetch Okendo data for ${this.productId}`
                  ))
                );
              const d = await e.json(),
                a = d.reviewAggregate?.reviewCount || 0,
                r =
                  (d.reviewAggregate?.attributeRatings || []).find(
                    (v) => v.title === "Sizing"
                  ) || {};
              if (!r || a < 2) {
                this.hide();
                return;
              }
              const y = this.querySelector("[data-point]"),
                p = (v) =>
                  v >= 0.4
                    ? "calc(100% - 8px)"
                    : v < -0.4
                    ? "4px"
                    : `calc(50% + ${v * 100}%)`;
              (y.style.left = p(r.value)), (this.style.opacity = "1");
            }
            hide() {
              this.style.display = "none";
            }
          }
          customElements.define("fit-indicator", i);
        }
        const ht = ut;
        var mt = s(2442),
          P = s.n(mt),
          gt = s(1105);
        const ft = () => {
            (P().prototype._createResizeClass = function () {
              this.element.classList.add("flickity-resize");
            }),
              P().createMethods.push("_createResizeClass");
            const i = P().prototype.resize;
            P().prototype.resize = function () {
              this.element.classList.remove("flickity-resize"),
                i.call(this),
                this.element.classList.add("flickity-resize");
            };
          },
          N = {
            slider: "[data-slider]",
            sliderPrev: "[data-prev-btn]",
            sliderNext: "[data-next-btn]",
          };
        function pt(i) {
          if (!i) return;
          const t = document.querySelector(i);
          if (!t) return;
          D();
          const e = t.querySelector(N.slider);
          if (!e) return;
          ft();
          const d = t.parentElement.querySelector(N.sliderPrev),
            a = t.parentElement.querySelector(N.sliderNext),
            h = new (P())(e, {
              prevNextButtons: !1,
              pageDots: !0,
              cellAlign: "left",
              watchCSS: !0,
              contain: !0,
              wrapAround: !1,
              groupCells: !0,
              draggable: !0,
              imagesloaded: !0,
              on: {
                ready() {
                  d?.addEventListener("click", () => this.previous()),
                    a?.addEventListener("click", () => this.next());
                },
                select(r) {
                  if (!d || !a) return;
                  const y = this.slides.length;
                  (d.disabled = r === 0), (a.disabled = r === y - 1);
                },
              },
            });
        }
        var _ = s(2131);
        function B({ name: i, delta: t, id: e }) {
          ga("send", "event", {
            eventCategory: "Web Vitals",
            eventAction: i,
            eventValue: Math.round(i === "CLS" ? t * 1e3 : t),
            eventLabel: e,
            nonInteraction: !0,
          });
        }
        window.addEventListener("load", () => {
          typeof window.ga > "u" ||
            ((0, _.kz)(B),
            (0, _.Tx)(B),
            (0, _.Tb)(B),
            (0, _.Y)(B),
            (0, _.CA)(B));
        }),
          document.addEventListener("DOMContentLoaded", () => {
            (0, g.zD)("*"),
              E(),
              F(),
              O(),
              x(),
              K(),
              D(),
              rt(),
              dt(),
              Y(),
              ct(),
              ht(),
              window.addEventListener("nosto:section:loaded", (t) =>
                pt(t?.detail?.sectionId)
              );
            const i = window.theme?.template?.name;
            (i === "search" || i === "collection") &&
              document.addEventListener("nosto:ns-serp", () => {
                D(), Y();
              }),
              window.addEventListener("klaviyoForms", (t) => {
                t.detail.type === "submit" &&
                  ((window.dataLayer = window.dataLayer || []),
                  window.dataLayer.push({
                    event: "newsletter_signup",
                    email: t.detail.metaData.$email,
                    form_id: t.detail.formId,
                  }));
              }),
              Promise.all([s.e(293), s.e(143)])
                .then(s.bind(s, 6566))
                .then((t) => t.default())
                .catch((t) =>
                  window.console.error("Could not load App module", t)
                );
          });
      },
    },
    z = {};
  function n(o) {
    var c = z[o];
    if (c !== void 0) return c.exports;
    var s = (z[o] = { exports: {} });
    return W[o].call(s.exports, s, s.exports, n), s.exports;
  }
  (n.m = W),
    (() => {
      var o = [];
      n.O = (c, s, f, g) => {
        if (s) {
          g = g || 0;
          for (var u = o.length; u > 0 && o[u - 1][2] > g; u--) o[u] = o[u - 1];
          o[u] = [s, f, g];
          return;
        }
        for (var l = 1 / 0, u = 0; u < o.length; u++) {
          for (var [s, f, g] = o[u], S = !0, b = 0; b < s.length; b++)
            (g & !1 || l >= g) && Object.keys(n.O).every((I) => n.O[I](s[b]))
              ? s.splice(b--, 1)
              : ((S = !1), g < l && (l = g));
          if (S) {
            o.splice(u--, 1);
            var E = f();
            E !== void 0 && (c = E);
          }
        }
        return c;
      };
    })(),
    (n.n = (o) => {
      var c = o && o.__esModule ? () => o.default : () => o;
      return n.d(c, { a: c }), c;
    }),
    (() => {
      var o = Object.getPrototypeOf
          ? (s) => Object.getPrototypeOf(s)
          : (s) => s.__proto__,
        c;
      n.t = function (s, f) {
        if (
          (f & 1 && (s = this(s)),
          f & 8 ||
            (typeof s == "object" &&
              s &&
              ((f & 4 && s.__esModule) ||
                (f & 16 && typeof s.then == "function"))))
        )
          return s;
        var g = Object.create(null);
        n.r(g);
        var u = {};
        c = c || [null, o({}), o([]), o(o)];
        for (
          var l = f & 2 && s;
          typeof l == "object" && !~c.indexOf(l);
          l = o(l)
        )
          Object.getOwnPropertyNames(l).forEach((S) => (u[S] = () => s[S]));
        return (u.default = () => s), n.d(g, u), g;
      };
    })(),
    (n.d = (o, c) => {
      for (var s in c)
        n.o(c, s) &&
          !n.o(o, s) &&
          Object.defineProperty(o, s, { enumerable: !0, get: c[s] });
    }),
    (n.f = {}),
    (n.e = (o) =>
      Promise.all(Object.keys(n.f).reduce((c, s) => (n.f[s](o, c), c), []))),
    (n.u = (o) => "assets/app.138e08a9eda0a3f065d5.min.js"),
    (n.miniCssF = (o) => {}),
    (n.g = (function () {
      if (typeof globalThis == "object") return globalThis;
      try {
        return this || new Function("return this")();
      } catch {
        if (typeof window == "object") return window;
      }
    })()),
    (n.o = (o, c) => Object.prototype.hasOwnProperty.call(o, c)),
    (() => {
      var o = {},
        c = "blue-illusion:";
      n.l = (s, f, g, u) => {
        if (o[s]) {
          o[s].push(f);
          return;
        }
        var l, S;
        if (g !== void 0)
          for (
            var b = document.getElementsByTagName("script"), E = 0;
            E < b.length;
            E++
          ) {
            var L = b[E];
            if (
              L.getAttribute("src") == s ||
              L.getAttribute("data-webpack") == c + g
            ) {
              l = L;
              break;
            }
          }
        l ||
          ((S = !0),
          (l = document.createElement("script")),
          (l.charset = "utf-8"),
          (l.timeout = 120),
          n.nc && l.setAttribute("nonce", n.nc),
          l.setAttribute("data-webpack", c + g),
          (l.src = s)),
          (o[s] = [f]);
        var F = (O, I) => {
            (l.onerror = l.onload = null), clearTimeout(q);
            var x = o[s];
            if (
              (delete o[s],
              l.parentNode && l.parentNode.removeChild(l),
              x && x.forEach((V) => V(I)),
              O)
            )
              return O(I);
          },
          q = setTimeout(
            F.bind(null, void 0, { type: "timeout", target: l }),
            12e4
          );
        (l.onerror = F.bind(null, l.onerror)),
          (l.onload = F.bind(null, l.onload)),
          S && document.head.appendChild(l);
      };
    })(),
    (n.r = (o) => {
      typeof Symbol < "u" &&
        Symbol.toStringTag &&
        Object.defineProperty(o, Symbol.toStringTag, { value: "Module" }),
        Object.defineProperty(o, "__esModule", { value: !0 });
    }),
    (n.j = 233),
    (() => {
      var o;
      n.g.importScripts && (o = n.g.location + "");
      var c = n.g.document;
      if (!o && c && (c.currentScript && (o = c.currentScript.src), !o)) {
        var s = c.getElementsByTagName("script");
        s.length && (o = s[s.length - 1].src);
      }
      if (!o)
        throw new Error(
          "Automatic publicPath is not supported in this browser"
        );
      (o = o
        .replace(/#.*$/, "")
        .replace(/\?.*$/, "")
        .replace(/\/[^\/]+$/, "/")),
        (n.p = o + "../");
    })(),
    (() => {
      var o = { 233: 0 };
      (n.f.j = (f, g) => {
        var u = n.o(o, f) ? o[f] : void 0;
        if (u !== 0)
          if (u) g.push(u[2]);
          else {
            var l = new Promise((L, F) => (u = o[f] = [L, F]));
            g.push((u[2] = l));
            var S = n.p + n.u(f),
              b = new Error(),
              E = (L) => {
                if (n.o(o, f) && ((u = o[f]), u !== 0 && (o[f] = void 0), u)) {
                  var F = L && (L.type === "load" ? "missing" : L.type),
                    q = L && L.target && L.target.src;
                  (b.message =
                    "Loading chunk " +
                    f +
                    ` failed.
(` +
                    F +
                    ": " +
                    q +
                    ")"),
                    (b.name = "ChunkLoadError"),
                    (b.type = F),
                    (b.request = q),
                    u[1](b);
                }
              };
            n.l(S, E, "chunk-" + f, f);
          }
      }),
        (n.O.j = (f) => o[f] === 0);
      var c = (f, g) => {
          var [u, l, S] = g,
            b,
            E,
            L = 0;
          if (u.some((q) => o[q] !== 0)) {
            for (b in l) n.o(l, b) && (n.m[b] = l[b]);
            if (S) var F = S(n);
          }
          for (f && f(g); L < u.length; L++)
            (E = u[L]), n.o(o, E) && o[E] && o[E][0](), (o[E] = 0);
          return n.O(F);
        },
        s = (globalThis.webpackChunkblue_illusion =
          globalThis.webpackChunkblue_illusion || []);
      s.forEach(c.bind(null, 0)), (s.push = c.bind(null, s.push.bind(s)));
    })();
  var U = n.O(void 0, [293], () => n(1886));
  U = n.O(U);
})();
